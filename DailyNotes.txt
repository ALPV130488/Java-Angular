0,1--->binary ------------------>acsii/unicode

predefined words=definition   

programs:-set of instructions

								computer lang
								
					scripting lang			programming lang
					
s.l:-for designing webpages.

html,css,javaScript	....				

p.l:-for developing softwares.
java,c ,c++,.net,.......
								programming lang
								
						pop							oop
					basic,cobal,....			java,c++,pyhton,.net,.....
					
					
java:-
=====

platform independency:-	wora


Garbage collector:-

oops:-

performances:-Inheritance,Polymorphism

security:-Encapsulation,Abstraction

java history:-Sun Microsystem---------->Oracle

			green team
			
			greentalk(.gt)------->oak------------->java(.java)
			
			jdk1.0(1992)-------------------------->jdk21
			
			
	
	To check the java version:-
	
	cmd>java --version
	
	
	
	jse/j2se:-core java[standalone=no client and server archi]
	
	
	jee/j2ee:-Advanced contents[distributed=client and server archi]
	
	
	jme/j2me:-micro details of core java[mobile]
	
	
	programming lang:-
	
	keywords:-
	
	
	variables:-
	
	syntax:-
	
	datatype varname;		======>declartion
	
	datatype varname = 56;	======>initialization	
	
									variables
							local var 			global var
							
											static 				instance
											
syntax:-
	
	static:-	static datatype varname = 56;
	
	instance:-	datatype varname = 56;
	
	
Access:-

static:-static porp's/variables can be accessed by the class name

					classname.varname

instance:-instance prop's /variables can be accessed by the object reference


	creating an	object:-
	
			ClassName objname = new ClassName();
			
		
			objname.varname;
		
		
		
memory:-

static:-it will gets the memory space only at once when the class loads into jvm

instance:-it will gets the memory space for every object creation;
		
		
		
		ULTRA AB
		
		
		
		
class=var+methods

method signature:-

instance :-
			accessmodifier returntype methodname(params...){
			
			//method body
			}
			
			
	static 	:-						
	
	accessmodifier static returntype methodname(params...){
			
			//method body
			}
			
			
	Inheritance:-Acquring parent class prop's to the child class
	
	
		extends 				implements
		
		
		@In java mutiple inheritance is not supported  at class level
		
		@In java mutiple inheritance is supported  at interfaces level


	class A{
	add(int a,int b){
	
	return a+b;
	}
	
	
	}
	class B{
	add(int a,int b){
	
	return a*b;
	}
	
	
	}
	class c extends A,B{
	
	add(2,3);
	
	}
	
	
	Based on the method body:-
	
	
	(1)Abstract method:-If the method is not having any method body 
	
		public static void add(int a,int b);--->interfaces
		
		public abstract void add(int a,int b);---->abstract class
	
		public void display() {----->abstract class
		
		}
	
	(2)concrete method:-If the method is having body
	
		public static void add(int a,int b){
		//body
		}
	
	
	class:-only collection of having concrete methods
	
	
	Abstract class :-Collection of both concrete+abstract methods
	
	
	interface:-Only collection of abstract methods
	
	
	Abstraction:-hiding data/logic
	
	
	
	Polymorphism:-
	
	(1)mehthod Overloading:-(Based on the parameters)methods having same name,but difference in the parameters
	
							(a)type of parameters
							(b)No:-of parameters
							(c)Order of parameters
	
	(2)Method Overriding:-(Based method's implementation)Methods having same name,but the met's body is different
	
	class Parent{
	
	10thcr property(){
	
	}
	
	marriage(){
	syso("kajol");
	
	}
	
	
	}
	
	class child extends Parent{
	10thcr property(){
	
	}
	
	@Override
	marriage(){
	syso("Deepika");
	}
	
	}
	
	* For every java file the default package is java.lang;
	
	* For every java file the default parent class is java.lang.Object;
	
	
	
	access modifiers:-4 a.m's to place before var's,classes,interface's,cont's,met's
	
	private 
	
	public 
	
	default
	
	protected
	
	constructors:-
	
	(1)default constructors:-	a.m classname(){			//default constructors
								//body
									}
	
	(2)Parametrized constructor:-
	
								a.m classname(parameters){
								
								}
	
	
	
	Encapsulation:-Wrapping up of the data into a single entity.
	
	
	Exception Handling uses:-

		(1)To terminate our code in a normal manner

		(2)To throw user friendly error messages
					
			

				try    catch throw  throws  finally
				
				
	user defined exception:-
	
	
			(1)Our exception class must be a child class to Exception class
			
			
			
	Arrays:-
	
			syntax to create an array:-
			
			
			(1)int arrname[] = {10,2,3,4,5,6,7};		//initialization of an array
			
			(2)int arrname[] = new int[10];				//initialization of an array
			
			arrname[3] = 24;
			
			(3)int arranme[] = new int[]{10,2,3,4,5,6,7};
			
			
			1.No utility met's/variables.
			
			2.Only homogeneous dt's will be accepted.
			
			3.fixed in size.
			
			
	Collection:- 
			
		framework:-set of predefined classes,interfaces and readymade met's.
		
		
		
		1.utility met's/variables.
			
		2.homogeneous/heterogenous dt's will be accepted.
			
		3.It's not fixed in size.
		
		
		collection are in package:- java.util.*;
		
		
		default package :-java.lang.*;
		
		parent class     :-java.lang.Object;
		
		File Handling:- It implies how to read from and write into a file using .java files.
		
		java.io.*;
		
		(1)create file			:-File
		
		(2)write into a file	:-FileWriter,BufferedWriter,PrintWriter
		
		(3)read from a file		:-FileReader,BufferedWriter.
		
		
		
		java.util.Date;				---->date & time
		
		joda.org(java 8)
		
		java.time.LocalDate;		---->date
		
		
		Mutlithreading:-
		
		
		
		Thread:-performing a single task
		
		multi threading:-performing more than one task at a time
		
		process based mt:-performing many tasks at a time where each task is independent on 
							each other.
		
		
		thread based mt:-performing many tasks at a time where each task is dependent on 
							each other.
							
					
		3 tasks(non-sync)				1 task(synchronised)	
		
		
		Thread	class (extends)===>run()				Runnable interface	(implements)	===>run()[F.I]
		
		
		String:-
		
					String 	(immutable)			StringBuffer (mutable)(Sync)			StringBuilder (mutable)(Async)
					
			
			
	junit:-java unit testing to check a peice of code.
	
	
	Data:-Raw info of any real world entites
	
	Database:-Storing data in an organised way for future access,security,
	
	
			apple			2334		
			
			grapes			234						
							
			banana			347	
			
			
			orange 			877
			
			
	
	RDBMS:-Table = rows(records)+ columns(fields)
	
	Querys:-query is used to perform operations in the db.
	
	
	5 types of Query:-
	
	(1)DDL(Data Definition lang):-create,alter,drop,truncate,rename			(Autocommiteed)
	
	(2)DML(Data Manipulation lang):-insert,update,delete					(Not Autocommiteed)
	
	(3)DRL(Data Retrival lang):-select
	
	(4)DCL(Data Control lang):-grant,revoke
	
	(5)TCL(Trans'n Control lang):-commit,rollback
	
	
	to create an user account in the db:-
	
	cmd>conn /as sysdba									conn to db with system admin
	
	cmd>create user username identified by password;	 user account registration
	
	cmd>grant connect, resource to username;			requesting permission to use db resources
	
	cmd>conn username/password;							login
	
	DDL:-
	Create:-
	
	(1)To create a table:-
	
	
	create table emp(eid number(10),ename varchar2(10), esal number(10));
	
	(2)to check the table description
	
	desc tablename;
	 
	 describe tablename;
	 
	 alter:-
	 
	 alter table employee modify ename number(10);
	 
	 
	 drop :- deletes entire table and its records,fields
	 
	 truncate :-deletes table's records
	 
	delete :- deletes table's records on a condition as well as all the records also.
	 
	 DML:-
	 
	 insert:-
	 
	 cmd>insert into table_name values(12,'apple',12,'hyd');
	 
	 
	 Defualt table:-DUAL
	 
	 
	 
	 jdbc:-java database connectivity
	 
	 
	 1.Loading the driver class.
	 
	 2.Create the connection with the database
	 
	 3.create the statment
	 
	 4.exceute the queries.
	 
	 
	 5.close the connections.
	 
	 
	 limits:-
	 
	 (1)we must use the exception classes
	 
	 (2)queries
	 
	 (3)chaging db is complex
	 
	 (4)table should be created on our own
	 
	 
	 jpa:-(specfications)----->ORM Tools(Java Persistence API)
	 
	 hibernate,ecllipse link,ibatis.....
	 
	 hibernate:-
	 
	 * will create the tables for us
	 
	 * No queries	===>Query equivalent method's
	 
	 * separate file for db properties
	 
	 * No Exception classes
	 
	 * No boiler plate code
	 
	 
	 
	 1.Loading the driver class.
	 
	 2.Create the connection with the database
	 
	 3.create the statment
	 
	 4.exceute the queries.
	 
	 
	 5.close the connections. 
	 
	 
	 Class ------>Table
	 
	 variables----->columns		EntityManager
	 
	Objects	---->Rows
	 
	 
	 CRUD:-
	 
	 insert --->persit()
	 
	 select --->find()
	 
	 update ---->merge()
	 
	 delete --->remove()
	 
	 Maven:-It's a build tool.
	 
									SPRING
									======
	 
	 SPRING:-Spring is a non-invasive framework which is used to create light weighted and 
				loosley coupled WEB applications.
				
	NON-INVASIVE:-	It will not rushes the programmer to used predefined API.	
	
	
	
	class A{
	
	100 met's;
	}
				
	class B extends A{					====> B is a heavy weighted component after inheritance
	
	20 met's + 100 	====>120 met's
	
	}		
	
	Tightly coupled:-	If the dependencies are very high b/n two classes those  tightly coupled  app's.
	
	
	Loosley coupled:-	If the dependencies are very low b/n two classes those  loosely coupled  app's.
	
	
	spring 1.x
	
	spring 6.x
	
	
	spring core; spring boot;spring rest;  spring data jpa;spring security;spring cloud.......
											
									1.Spring Core
									=============
	Spring Core:-To avoid dependencies b/n the classes.(avoiding objects)===>loosely coupled app
	
	**Container :-It's used to create the objects and it initializes the objects
			(1)Bean Factory			:-lazy  initializer
			(2)Application Context 	:-Eager intializer
			
	
	Dependency Injection:-Injecting the data into the object/dependency
	
			(1)Setter Injection:-<property></property>
			(2)Constructor:-<constructor-arg></constructor-arg>
			(3)Autowiring	:-<bean id="" class="" autowire="byName,byType,costructor,default,no">
								<property></property>
	
	Configuration:-
	
	(1)xml configuration
	(2)Annotation Configuration
			
			
	